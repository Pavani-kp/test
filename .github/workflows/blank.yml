name: Run Tests and Extract Allure Summary (Windows)

on:
  workflow_dispatch:

jobs:
  allure-report:
    runs-on: windows-latest  # Use a Windows runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python (if using pytest for tests)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies (e.g., pytest, allure-pytest)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest allure-pytest
          pip install -r requirements.txt
      
      - name: Install Scoop
        run: |
         Set-ExecutionPolicy RemoteSigned -scope CurrentUser
         iwr -useb get.scoop.sh | iex
         scoop install allure 
         echo $env:PATH 
         C:\Users\runneradmin\scoop\apps\allure\2.33.0\bin\allure.bat --version
      - name: Scrape Allure Report for Pass, Fail, and Skip Counts
        run: |
          # Install required libraries
          python -m pip install requests beautifulsoup4
        
          # URL of the Allure report hosted on GitHub Pages
          $url = "https://pavani-kp.github.io/test/index.html"

          # Python script to scrape and extract the pass, fail, and skip counts from the hosted Allure report
          $python_script = @"
          import requests
          from bs4 import BeautifulSoup

          # Fetch the HTML content of the Allure report page
          response = requests.get('$url')
          soup = BeautifulSoup(response.text, 'html.parser')
          # Debugging: Print out the first 500 characters of the HTML to understand the structure
          print("HTML Content (First 500 characters):")
          print(response.text[:500])

          # Extract pass, fail, and skip counts from the report summary
          pass_count = 0
          fail_count = 0
          skip_count = 0

          all_summary_elements = soup.find_all("div", class_="bar__fill bar__fill_status_passed")

          # Check if we can find the "Passed" count (assuming this is the format of the result)
          for element in all_summary_elements:
            if 'Passed' in element.text:
              pass_count = int(element.text.strip().split(":")[1].strip())
              echo "$element.text"
          # Find the elements that contain the pass, fail, and skip counts (these may vary based on your report structure)
          fail_element = soup.find('div', class_='bar__fill bar__fill_status_failed')  # Update this class based on your report structure
          skip_element = soup.find('div', class_='bar__fill bar__fill_status_skipped')  # Update this class based on your report structure

          if fail_element:
            fail_count = int(fail_element.text.strip().split()[0])  # Extract the number from the text
          if skip_element:
            skip_count = int(skip_element.text.strip().split()[0])  # Extract the number from the text

          print(f"Test Pass Count: {pass_count}")
          print(f"Test Fail Count: {fail_count}")
          print(f"Test Skip Count: {skip_count}")
          "@

          # Run the Python script to extract the pass, fail, and skip counts
          echo $python_script | python
