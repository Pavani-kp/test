name: Run Tests and Extract Allure Summary (Windows)

on:
  workflow_dispatch:

jobs:
  allure-report:
    runs-on: windows-latest  # Use a Windows runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python (if using pytest for tests)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies (e.g., pytest, allure-pytest)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest allure-pytest
          pip install -r requirements.txt
      - name: Install Scoop
        run: |
         Set-ExecutionPolicy RemoteSigned -scope CurrentUser
         iwr -useb get.scoop.sh | iex
         scoop install allure 
         echo $env:PATH 
         C:\Users\runneradmin\scoop\apps\allure\2.33.0\bin\allure.bat --version
      - name: Run tests with pytest and generate Allure results
        run: |
          pytest --alluredir=allure-results  # Specify the directory where results will be saved
         
      # Step 6: Generate the Allure report from the results
      - name: Generate Allure report
        run: |
          C:\Users\runneradmin\scoop\apps\allure\2.33.0\bin\allure.bat generate allure-results --clean --output allure-report
      - name: List files in the folder
        run: |
          # Specify the path to the folder (you can use the path to your allure-results folder here)
          $allureResultsPath = "$(pwd)\allure-results\"
          # List all files in the folder
          Write-Host "Listing files in folder: $allureResultsPath"
          Get-ChildItem -Path "D:\a\test\test\allure-results\" -Recurse
      - name: Parse Allure results to get pass count
        run: |
          # Initialize pass count
          $passCount = 0

          # Define the allure-results directory
          $allureResultsPath = "$(pwd)\allure-results"

          # Get all the .json files in the allure-results directory
          $jsonFiles = Get-ChildItem -Path $allureResultsPath -Recurse -Filter "*.json"
          
          # Iterate over each .json file
          foreach ($file in $jsonFiles) {
              Write-Host "Processing file: $($file.FullName)"
              
              # Load the content of the JSON file
              $jsonContent = Get-Content -Path $file.FullName | ConvertFrom-Json
              echo $jsonContent
              # Loop through the tests in the JSON file
              foreach ($test in $jsonContent) {
                  echo $test.status
                  # Check if the test status is 'passed'
                  if ($test.status -eq "passed") {
                      $passCount++
                  }
              }
          }

          # Output the number of passed tests
          Write-Host "Total Passed Tests: $passCount"
          echo "PassCount=$passCount" >> $env:GITHUB_ENV
      - name: print
        run: |
         $env:MESSAGE=@"
         TestSuite : Test
         Pass : $env:PassCount
         Job : ${{ github.job }}
         "@
         Write-Host "Message to Teams: $env:MESSAGE"
         $jsonBody = "{`"text`": `"$($env:MESSAGE)`"}"
         Write-Host "$jsonBody"
         $customName = "TestResults"
         $longurl = "https://ncrvoyix-swt-cfr.github.ip/nextgenfuel-bdd-automation/allure-action/efs-7339_bddsmoketestrestultstoteams/allure-reports/140000987898_8977878787878"
         $shortenedUrl = Invoke-WebRequest -Uri "https://is.gd/create.php?format=simple&url=$longUrl&shorturl=$customName"
         Write-Host $shortenedUrl
