name: Run Tests and Extract Allure Summary (Windows)

on:
  workflow_dispatch:

jobs:
  allure-report:
    runs-on: windows-latest  # Use a Windows runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Python (if using pytest for tests)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install dependencies (e.g., pytest, allure-pytest)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest allure-pytest
          pip install -r requirements.txt
      - name: Install Scoop
        run: |
         Set-ExecutionPolicy RemoteSigned -scope CurrentUser
         iwr -useb get.scoop.sh | iex
         scoop install allure 
         echo $env:PATH 
         C:\Users\runneradmin\scoop\apps\allure\2.33.0\bin\allure.bat --version
      - name: Run tests with pytest and generate Allure results
        run: |
          pytest --alluredir=allure-results  # Specify the directory where results will be saved
         
      # Step 6: Generate the Allure report from the results
      - name: Generate Allure report
        run: |
          C:\Users\runneradmin\scoop\apps\allure\2.33.0\bin\allure.bat generate allure-results --clean --output allure-report
      - name: List files in the folder
        run: |
          # Specify the path to the folder (you can use the path to your allure-results folder here)
          $allureResultsPath = "$(pwd)\allure-results"

          # List all files in the folder
          Write-Host "Listing files in folder: $allureResultsPath"
          Get-ChildItem -Path $folderPath -Recurse
      - name: Parse Allure results to get pass count
        run: |
          $passCount = 0
          $allureResultFiles = Get-ChildItem -Path $allureResultsPath -Recurse -Filter "*.xml"
          
          foreach ($file in $allureResultFiles) {
              [xml]$xmlContent = Get-Content $file.FullName
              echo $file.FullName
              $passCount += ($xmlContent.testsuite.testcase | Where-Object { $_.status -eq "passed" }).Count
          }

          Write-Output "Total Passed Tests: $passCount"
          
          # Store the pass count as a GitHub Actions output
          echo "pass_count=$passCount" >> $GITHUB_ENV
          
      - name: Output Pass Count
        run: |
          echo "Pass count: ${{ env.pass_count }}"
